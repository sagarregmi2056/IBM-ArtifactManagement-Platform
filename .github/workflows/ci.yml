name: Spring Boot CI

on:
  push:
    branches: [ main ]
    paths:
      - 'spring-boot-service/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'spring-boot-service/**'

env:
  IMAGE_NAME: spring-boot-service
  SERVICE_PATH: ./spring-boot-service
  DOCKERFILE_PATH: ./spring-boot-service/docker/Dockerfile.spring


jobs:
  build:
    name: Build Maven Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build & Test with Maven
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          chmod +x ./mvnw
          ./mvnw clean install -DskipTests=true

  docker-build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}   
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx (with container driver)
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:cache,mode=max
          builder: ${{ steps.buildx.outputs.name }}

  notify:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: always()
    steps:
      - name: Build JSON Payload
        id: payload
        run: |
          STATUS="SUCCESS"
          COLOR=65280
          if [ "${{ needs.docker-build-and-push.result }}" != "success" ]; then
            STATUS="FAILURE"
            COLOR=16711680
          fi
          jq -n \
            --arg repo "${GITHUB_REPOSITORY}" \
            --arg branch "${GITHUB_REF_NAME}" \
            --arg sha "${GITHUB_SHA}" \
            --arg run_url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" \
            --arg image "${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${GITHUB_SHA}" \
            --arg status "$STATUS" \
            --argjson color "$COLOR" \
            '{
              username: "Spring Boot Service CI  BOT",
              embeds: [
                {
                  title: "Spring Boot Service CI Build Status",
                  description: "**Repository:** [\($repo)](\($repo))\n**Branch:** \($branch)\n**Commit:** \($sha)\n**Status:** \($status)\n**Workflow Run:** [View Run](\($run_url))\n**Docker Image:** `\($image)`",
                  color: $color
                }
              ]
            }' > payload.json

      - name: Send Discord Notification
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d @payload.json \
               ${{ secrets.DISCORD_WEBHOOK_URL }}


