name: Real-time Error Monitoring

on:
  workflow_run:
    workflows: ["Spring Boot CD to OpenShift"]
    types:
      - completed
    branches:
      - main

jobs:
  monitor-errors:
    name: Monitor Application Errors
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Install OpenShift CLI
        run: |
          echo "üì• Installing OpenShift CLI..."
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc
      
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Monitor Application Logs
        run: |
          echo "üëÄ Starting error monitoring..."
          
          # Get pod name
          POD_NAME=$(oc get pods -l app=spring-boot-app --no-headers -o custom-columns=":metadata.name" | head -n 1)
          
          if [ ! -z "$POD_NAME" ]; then
            echo "üîç Monitoring pod: $POD_NAME"
            
            # Initialize error count and last notification time
            ERROR_COUNT=0
            LAST_NOTIFICATION=$(date +%s)
            
            # Monitor for 30 minutes (can be adjusted)
            MONITOR_DURATION=1800  # 30 minutes in seconds
            END_TIME=$(($(date +%s) + MONITOR_DURATION))
            
            # Follow logs and process errors
            oc logs -f $POD_NAME | while read line; do
              NOW=$(date +%s)
              
              # Stop if we've reached the time limit
              if [ $NOW -gt $END_TIME ]; then
                echo "‚úÖ Monitoring period completed"
                break
              fi
              
              # Check for errors
              if echo "$line" | grep -iE "error|exception|crash|failure|failed" > /dev/null; then
                ERROR_COUNT=$((ERROR_COUNT + 1))
                echo "‚ö†Ô∏è Error detected: $line"
                
                # Only notify if it's been more than 5 minutes since last notification
                if [ $((NOW - LAST_NOTIFICATION)) -gt 300 ]; then
                  LAST_NOTIFICATION=$NOW
                  
                  # Get pod status and resources
                  POD_STATUS=$(oc get pod $POD_NAME -o jsonpath='{.status.phase}')
                  RESTARTS=$(oc get pod $POD_NAME -o jsonpath='{.status.containerStatuses[0].restartCount}')
                  CPU=$(oc exec $POD_NAME -- top -bn1 | grep "Cpu(s)" | awk '{print $2}' || echo "N/A")
                  MEMORY=$(oc exec $POD_NAME -- free -m | grep "Mem:" | awk '{print int($3/$2 * 100)}' || echo "N/A")
                  
                  # Send to Discord with context
                  curl -H "Content-Type: application/json" \
                       -X POST \
                       -d '{
                         "username": "Error Monitor",
                         "embeds": [{
                           "title": "‚ö†Ô∏è Application Error Detected",
                           "description": "**Error Message:**\n```\n'"$line"'\n```\n\n**Context:**\n‚Ä¢ Pod: `'"$POD_NAME"'`\n‚Ä¢ Status: `'"$POD_STATUS"'`\n‚Ä¢ Restarts: `'"$RESTARTS"'`\n‚Ä¢ CPU Usage: `'"$CPU"'%`\n‚Ä¢ Memory Usage: `'"$MEMORY"'%`\n‚Ä¢ Error Count: `'"$ERROR_COUNT"'`\n\n**Time:** `'"$(date -u "+%Y-%m-%d %H:%M:%S UTC")"'`",
                           "color": 15158332
                         }]
                       }' \
                       "${{ secrets.DISCORD_WEBHOOK_URL }}"
                fi
              fi
            done
            
            echo "üìä Monitoring summary:"
            echo "‚Ä¢ Total errors detected: $ERROR_COUNT"
            echo "‚Ä¢ Duration: 30 minutes"
            echo "‚Ä¢ Pod status at end: $(oc get pod $POD_NAME -o jsonpath='{.status.phase}')"
          else
            echo "‚ö†Ô∏è No application pods found"
            exit 1
          fi
