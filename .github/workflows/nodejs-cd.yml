name: Node.js AI Service CD

on:
  workflow_run:
    workflows: ["Node.js AI Service CI"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Install OpenShift CLI
        run: |
          echo "üì• Installing OpenShift CLI..."
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Setup ConfigMap and Secrets
        run: |
          echo "üîß Creating/Updating ConfigMap..."
          cat << EOF | oc apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: nodejs-ai-config
          data:
            QDRANT_URL: "${{ secrets.QDRANT_URL }}"
            NODE_ENV: "production"
            LOG_LEVEL: "info"
          EOF

          echo "üîê Creating/Updating Secrets..."
          # Delete the secret if it exists
          oc delete secret nodejs-ai-secrets 2>/dev/null || true
          
          # Create new secret with updated values
          echo "Creating new secrets..."
          oc create secret generic nodejs-ai-secrets \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --from-literal=QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}

      - name: Deploy Node.js Service
        run: |
          echo "üöÄ Deploying Node.js service..."
          
          # Apply all OpenShift configurations
          oc apply -f openshift/nodejs/
          
          # Update the image
          echo "üîÑ Updating container image..."
          oc set image dc/nodejs-ai-service nodejs-ai-service=${{ secrets.DOCKER_REGISTRY_URL }}/${{ secrets.DOCKER_USERNAME }}/nodejs-ai-service:${{ github.sha }}

      - name: Debug Pod Status (if deployment fails)
        if: failure()
        run: |
          echo "üîç Debugging pod status after deployment failure..."
          
          # Get all pods
          echo "üìä All pods:"
          oc get pods -l app=nodejs-ai-service
          
          # Get pod name
          POD_NAME=$(oc get pods -l app=nodejs-ai-service --sort-by=.metadata.creationTimestamp -o name | tail -n1)
          
          if [ -n "$POD_NAME" ]; then
            echo "üì¶ Pod name: $POD_NAME"
            
            # Describe the pod for events
            echo "üìã Pod description:"
            oc describe $POD_NAME || true
            
            # Get logs
            echo "üìã Pod logs:"
            oc logs $POD_NAME || true
            
            # Check if pod has multiple containers
            echo "üìã Previous container logs (if exists):"
            oc logs $POD_NAME --previous || true
          else
            echo "‚ö†Ô∏è No pods found for nodejs-ai-service"
          fi

      - name: Wait for Deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          oc rollout status dc/nodejs-ai-service --timeout=300s
          
          echo "‚è≥ Waiting for pod to be ready..."
          oc wait --for=condition=ready pod -l app=nodejs-ai-service --timeout=300s

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          
          # Get pod name
          POD_NAME=$(oc get pods -l app=nodejs-ai-service --sort-by=.metadata.creationTimestamp -o name | tail -n1)
          
          if [ -z "$POD_NAME" ]; then
            echo "‚ùå No pods found!"
            exit 1
          fi
          
          echo "üì¶ Pod name: $POD_NAME"
          
          # Check pod status
          echo "üìä Pod status:"
          oc get $POD_NAME -o yaml | grep phase:
          
          # Check logs
          echo "üìã Recent logs:"
          oc logs $POD_NAME --tail=50
          
          # Get route
          ROUTE_URL=$(oc get route nodejs-ai-service -o jsonpath='{.spec.host}')
          echo "üåê Service URL: https://$ROUTE_URL"
          
          # Test health endpoint
          echo "üè• Testing health endpoint..."
          HEALTH_STATUS=$(oc exec $POD_NAME -- curl -s http://localhost:3001/health)
          echo "Health check response: $HEALTH_STATUS"

      - name: Send Notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          COLOR=$( [ "$STATUS" == "success" ] && echo "3066993" || echo "15158332" )
          ROUTE_URL=$(oc get route nodejs-ai-service -o jsonpath='{.spec.host}')
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "OpenShift CD Bot",
                 "embeds": [{
                   "title": "Node.js AI Service Deployment: '"$STATUS"'",
                   "description": "**Repository:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\n**Branch:** `${{ github.ref_name }}`\n**Commit:** `${{ github.sha }}`\n\n**üåê Service URL:** `https://'"$ROUTE_URL"'`\n\n**üìù Deployment Notes:**\n‚Ä¢ Node.js AI service is running on port 3001\n‚Ä¢ Health check endpoint: /health\n‚Ä¢ API endpoints: /api/*",
                   "color": '"$COLOR"'
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
