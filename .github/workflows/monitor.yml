name: Setup Monitoring Stack

# Trigger after CD pipeline completes successfully
on:
  workflow_run:
    workflows: ["Spring Boot CD to OpenShift"]
    types:
      - completed
    branches:
      - main

jobs:
  setup-monitoring:
    name: Configure Service Monitoring
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI
        run: |
          echo "üì• Installing OpenShift CLI..."
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc
          echo "‚úÖ OpenShift CLI installed"
      
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Check Metrics Availability
        run: |
          echo "üîç Checking metrics availability..."
          
          # Get route URL
          ROUTE_URL="http://$(oc get route spring-boot-route -o jsonpath='{.spec.host}')"
          echo "üìä Metrics will be available at: ${ROUTE_URL}/actuator/prometheus"
          
          echo "‚úÖ Spring Boot Actuator metrics are enabled"

      - name: Verify Metrics Endpoint
        run: |
          echo "üîç Verifying metrics endpoint..."
          
          # Get pod name
          POD_NAME=$(oc get pods -l app=spring-boot-app --no-headers -o custom-columns=":metadata.name" | head -n 1)
          
          if [ ! -z "$POD_NAME" ]; then
            echo "üìä Testing metrics endpoint..."
            METRICS=$(oc exec $POD_NAME -- curl -s http://localhost:8081/actuator/prometheus)
            if [ $? -eq 0 ]; then
              echo "‚úÖ Metrics endpoint is working"
              echo "üìä Sample metrics available:"
              echo "$METRICS" | grep -E "^(jvm_memory|http_server_requests)" | head -n 5
              
              # Store pod URL for notification
              POD_URL="http://$(oc get route spring-boot-route -o jsonpath='{.spec.host}')"
              echo "POD_URL=$POD_URL" >> $GITHUB_ENV
            else
              echo "‚ö†Ô∏è Could not access metrics endpoint"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No application pods found"
            exit 1
          fi

      - name: Send Discord Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ Success"
            COLOR=3066993
          else
            STATUS="‚ùå Failed"
            COLOR=15158332
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "Monitoring Bot",
                 "embeds": [{
                   "title": "Monitoring Setup: '"$STATUS"'",
                   "description": "**Repository:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\n**Branch:** `${{ github.ref_name }}`\n\n**üìä Metrics Available At:**\n‚Ä¢ Application: `${{ env.POD_URL }}/actuator/prometheus`\n‚Ä¢ Health: `${{ env.POD_URL }}/actuator/health`\n\n**üìù Note:**\nMetrics are available directly from the application endpoint. You can view them in the OpenShift console under Monitoring ‚Üí Metrics when proper permissions are granted.",
                   "color": '"$COLOR"'
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"