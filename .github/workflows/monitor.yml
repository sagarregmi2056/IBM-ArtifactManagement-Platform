name: Setup Monitoring Stack

# Trigger after CD pipeline completes successfully
on:
  workflow_run:
    workflows: ["Spring Boot CD to OpenShift"]
    types:
      - completed
    branches:
      - main

jobs:
  setup-monitoring:
    name: Deploy Prometheus & Grafana
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI
        run: |
          echo "üì• Installing OpenShift CLI..."
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc
          echo "‚úÖ OpenShift CLI installed"
      
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Configure OpenShift Monitoring
        run: |
          echo "üîß Using OpenShift built-in monitoring..."
          
          # Enable user workload monitoring
          oc patch configmap cluster-monitoring-config -n openshift-monitoring --type=merge --patch='{"data":{"config.yaml":"enableUserWorkload: true"}}'
          
          # Wait for user workload monitoring to be ready
          echo "‚è≥ Waiting for monitoring operators..."
          oc wait --for=condition=ready pod -l app.kubernetes.io/component=prometheus -n openshift-user-workload-monitoring --timeout=300s
          
          echo "‚úÖ OpenShift monitoring configured"

      - name: Create Grafana Secrets
        run: |
          if ! oc get secret grafana-secrets >/dev/null 2>&1; then
            echo "üîê Creating Grafana secrets..."
            oc create secret generic grafana-secrets \
              --from-literal=admin-user=admin \
              --from-literal=admin-password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
          else
            echo "‚úÖ Grafana secrets exist"
          fi

      - name: Configure Service Monitoring
        run: |
          echo "üöÄ Setting up service monitoring..."
          oc apply -f openshift/monitoring/servicemonitor.yaml
          
          echo "‚úÖ Service monitoring configured"

      - name: Verify Monitoring Stack
        run: |
          echo "üîç Verifying deployments..."
          
          # Check Prometheus
          PROMETHEUS_POD=$(oc get pod -l app=prometheus -o name | head -1)
          if [ ! -z "$PROMETHEUS_POD" ]; then
            echo "‚úÖ Prometheus is running"
            echo "üìä Checking Prometheus targets..."
            oc exec $PROMETHEUS_POD -- curl -s http://localhost:9090/api/v1/targets
          else
            echo "‚ùå Prometheus not found"
            exit 1
          fi
          
          # Check Grafana
          GRAFANA_POD=$(oc get pod -l app=grafana -o name | head -1)
          if [ ! -z "$GRAFANA_POD" ]; then
            echo "‚úÖ Grafana is running"
            echo "üîç Checking Grafana health..."
            oc exec $GRAFANA_POD -- curl -s http://localhost:3000/api/health
          else
            echo "‚ùå Grafana not found"
            exit 1
          fi

      - name: Get Access URLs
        run: |
          echo "üåê Access URLs:"
          echo "Prometheus: $(oc get route prometheus -o jsonpath='{.spec.host}')"
          echo "Grafana: $(oc get route grafana -o jsonpath='{.spec.host}')"
          
          # Store URLs for notification
          echo "PROMETHEUS_URL=$(oc get route prometheus -o jsonpath='{.spec.host}')" >> $GITHUB_ENV
          echo "GRAFANA_URL=$(oc get route grafana -o jsonpath='{.spec.host}')" >> $GITHUB_ENV

      - name: Send Discord Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            STATUS="‚úÖ Success"
            COLOR=3066993
          else
            STATUS="‚ùå Failed"
            COLOR=15158332
          fi
          
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "Monitoring Bot",
                 "embeds": [{
                   "title": "Monitoring Setup: '"$STATUS"'",
                   "description": "**Repository:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\n**Branch:** `${{ github.ref_name }}`\n\n**üîç Monitoring URLs:**\n‚Ä¢ Prometheus: `http://${{ env.PROMETHEUS_URL }}`\n‚Ä¢ Grafana: `http://${{ env.GRAFANA_URL }}`\n\n**üìù Default Credentials:**\n‚Ä¢ Username: `admin`\n‚Ä¢ Password: `${{ secrets.GRAFANA_ADMIN_PASSWORD }}`\n\n**üìä Available Dashboards:**\n‚Ä¢ Spring Boot Metrics\n‚Ä¢ MySQL Metrics\n‚Ä¢ JVM Statistics",
                   "color": '"$COLOR"'
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
