name: Spring Boot CD to OpenShift

# Watches your CI pipeline named "Spring Boot CI"

# Triggers automatically when CI completes successfully on main branch

# This creates the CI → CD chain

on:
  workflow_run:
    workflows: ["Spring Boot CI"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy-to-openshift:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    environment: production

    # Gets your OpenShift YAML files from repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install OpenShift CLI (oc)
        run: |
          echo "📥 Installing OpenShift CLI..."
          # Download and install oc CLI
          curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          sudo chmod +x /usr/local/bin/oc
          echo "✅ OpenShift CLI installed"
          # Verify installation
          oc version --client

      # Authenticates with OpenShift cluster using secrets
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}

      # --- 1. Create Secrets for Both MySQL and Spring Boot ---
      - name: Create MySQL Secrets
        run: |
          if ! oc get secret mysql-root-secret >/dev/null 2>&1; then
            echo "🔐 Creating MySQL root secret..."
            oc create secret generic mysql-root-secret \
              --from-literal=MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              --from-literal=MYSQL_DATABASE=spring_artifacts
          else
            echo "✅ MySQL root secret already exists"
          fi

          if ! oc get secret mysql-secret >/dev/null 2>&1; then
            echo "🔐 Creating MySQL application secret..."
            oc create secret generic mysql-secret \
              --from-literal=SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/spring_artifacts?createDatabaseIfNotExist=true \
              --from-literal=SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }} \
              --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              --from-literal=SERVER_PORT=8081
          else
            echo "✅ MySQL application secret already exists"
          fi

      # --- 2. Deploy MySQL Database and Create Route for Spring Boot ---
        # Deploy MySQL database if it doesn't exist
        # Create route for Spring Boot if it doesn't exist
        # Set environment variables for Spring Boot
        # Deploy Spring Boot application if it doesn't exist
        # Wait for rollout to complete
        # Verify deployment
        # Send Discord notification
      - name: Bootstrap Environment
        run: |
          if ! oc get dc/mysql >/dev/null 2>&1; then
            echo "🔧 Deploying MySQL database..."
            
            # Create PVC first
            oc apply -f openshift/mysql/mysql-pvc.yaml
            
            # Apply MySQL deployment and wait for it to be ready
            oc apply -f openshift/mysql/mysql-deployment.yaml
            echo "⏳ Waiting for MySQL deployment to be ready..."
            oc rollout status dc/mysql --timeout=300s
            
            # Create MySQL service
            oc apply -f openshift/mysql/mysql-service.yaml
            
            echo "⏳ Waiting for MySQL pod to be ready..."
            # Wait for pod with correct label to be ready
            oc wait --for=condition=ready pod -l app=mysql --timeout=300s || {
              echo "❌ Failed waiting for MySQL pod. Checking pod status..."
              oc get pods -l app=mysql
              oc describe pods -l app=mysql
              exit 1
            }
            
            echo "✅ MySQL is ready"
          else
            echo "✅ MySQL already deployed"
            
            # Ensure the deployment is rolled out
            echo "⏳ Checking MySQL deployment status..."
            oc rollout status dc/mysql --timeout=300s
          fi

          if ! oc get route spring-boot-route >/dev/null 2>&1; then
            echo "🔧 Creating Spring Boot services..."
            oc apply -f openshift/spring-boot-service.yaml
            oc apply -f openshift/spring-boot-route.yaml
            echo "✅ Spring Boot services created"
          else
            echo "✅ Spring Boot services already exist"
          fi

      # --- 3. Deploy Spring Boot Application ---
      - name: Deploy Spring Boot Application
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          IMAGE_NAME="saga99/spring-boot-service:${SHORT_SHA}"

          echo "🚀 Deploying Spring Boot app with image: ${IMAGE_NAME}"
          
          echo "🔄 Checking deployment status..."
          
          # Check if there's a rollout in progress
          ROLLOUT_STATUS=$(oc rollout status dc/spring-boot-app --watch=false 2>/dev/null)
          if [[ $ROLLOUT_STATUS == *"in progress"* ]]; then
            echo "⏳ Found in-progress rollout, waiting for it to complete..."
            if ! oc rollout status dc/spring-boot-app --timeout=60s; then
              echo "❌ Previous rollout stuck, attempting to cancel..."
              oc rollout cancel dc/spring-boot-app
              sleep 5
            fi
          fi
          
          echo "🔄 Updating deployment configuration..."
          # Update the image first
          echo "🚀 Updating container image to: ${IMAGE_NAME}"
          oc patch dc/spring-boot-app -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"spring-boot-app\",\"image\":\"${IMAGE_NAME}\"}]}}}}"
          
          # Then update environment variables
          echo "🔧 Setting environment variables..."
          oc set env dc/spring-boot-app \
            SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/spring_artifacts?createDatabaseIfNotExist=true \
            SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }} \
            SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            SERVER_PORT=8081
          
          # Trigger new rollout only if needed
          CURRENT_IMAGE=$(oc get dc/spring-boot-app -o jsonpath='{.spec.template.spec.containers[0].image}')
          if [ "$CURRENT_IMAGE" != "$IMAGE_NAME" ]; then
            echo "🔄 Starting new rollout..."
            oc rollout latest dc/spring-boot-app
          else
            echo "✅ Image is already up to date"
          fi
          
          # Wait for rollout with better error handling
          echo "⏳ Waiting for deployment to be ready..."
          if ! oc rollout status dc/spring-boot-app --timeout=300s; then
            echo "❌ Deployment failed. Gathering debug information..."
            
            echo "📋 Events in the last 5 minutes:"
            oc get events --sort-by='.lastTimestamp' | tail -n 20
            
            echo "📋 DeploymentConfig Status:"
            oc describe dc/spring-boot-app
            
            echo "📋 Pod Status:"
            oc get pods -l deploymentconfig=spring-boot-app
            
            # Try to get logs from any failed pods
            FAILED_PODS=$(oc get pods -l deploymentconfig=spring-boot-app --field-selector status.phase!=Running -o name)
            if [ ! -z "$FAILED_PODS" ]; then
              echo "📋 Logs from failed pods:"
              for pod in $FAILED_PODS; do
                echo "=== Logs from $pod ==="
                oc logs $pod --previous || oc logs $pod || echo "No logs available"
                echo "=== Pod Description ==="
                oc describe $pod
              done
            fi
            
            exit 1
          fi
          
          echo "✅ Deployment successfully rolled out"
          
          echo "🔧 Updating deployment configuration..."
          # Update environment variables
          oc set env dc/spring-boot-app \
            SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/spring_artifacts?createDatabaseIfNotExist=true \
            SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }} \
            SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            SERVER_PORT=8081
          
          # Update image if needed
          oc set image dc/spring-boot-app spring-boot-app=${IMAGE_NAME} --record=true
          
          echo "🔄 Triggering new deployment..."
          oc rollout latest dc/spring-boot-app || {
            if oc get dc/spring-boot-app -o jsonpath='{.status.conditions[?(@.type=="Progressing")].status}' | grep -q "True"; then
              echo "ℹ️ Deployment already in progress, continuing..."
            else
              echo "❌ Failed to trigger deployment. Checking status..."
              oc get dc/spring-boot-app
              oc describe dc/spring-boot-app
              exit 1
            fi
          }

      - name: Wait for Rollout
        run: |
          echo "⏳ Waiting for rollout to complete..."
          oc rollout status dc/spring-boot-app --timeout=600s
          echo "🔍 Waiting for application to be fully ready..."
          oc wait --for=condition=ready pod -l app=spring-boot-app --timeout=300s

      - name: Verify Deployment
        run: |
          ROUTE_URL=$(oc get route spring-boot-route -o jsonpath='{.spec.host}')
          POD_NAME=$(oc get pods -l app=spring-boot-app -o jsonpath='{.items[0].metadata.name}')
          MYSQL_POD=$(oc get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}')
          
          echo "🌐 Application URL: https://${ROUTE_URL}"
          echo "📦 Running Pod: ${POD_NAME}"
          echo "🗄️ MySQL Pod: ${MYSQL_POD}"
          
          echo "ROUTE_URL=https://${ROUTE_URL}" >> $GITHUB_ENV
          echo "APP_POD=${POD_NAME}" >> $GITHUB_ENV
          echo "MYSQL_POD=${MYSQL_POD}" >> $GITHUB_ENV
          
          echo "📋 Application logs (last 10 lines):"
          oc logs ${POD_NAME} --tail=10
          
          echo "🔍 Testing health endpoint..."
          if oc exec ${POD_NAME} -- curl -s http://localhost:8081/actuator/health > /dev/null; then
            echo "✅ Health check passed"
            echo "HEALTH_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "❌ Health check failed"
            echo "HEALTH_STATUS=FAILED" >> $GITHUB_ENV
            exit 1
          fi
          
          echo "🔍 Testing application response..."
          RESPONSE_CODE=$(oc exec ${POD_NAME} -- curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/actuator/health || echo "000")
          if [ "$RESPONSE_CODE" = "200" ]; then
            echo "✅ Application is responding correctly"
            echo "RESPONSE_CODE=200" >> $GITHUB_ENV
          else
            echo "❌ Application not responding properly (HTTP $RESPONSE_CODE)"
            echo "RESPONSE_CODE=$RESPONSE_CODE" >> $GITHUB_ENV
            exit 1
          fi

      - name: Deployment Status
        run: |
          echo "🎉 DEPLOYMENT SUMMARY"
          echo "===================="
          oc get pods -l app=spring-boot-app
          echo ""
          oc get route spring-boot-route
          echo ""
          echo "✅ CD Pipeline Completed Successfully!"

  notify:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    needs: deploy-to-openshift
    if: always()
    steps:
      - name: Send Discord Notification
        run: |
          # Set status emoji and color
          if [ "${{ needs.deploy-to-openshift.result }}" == "success" ]; then
            STATUS="✅ Success"
            COLOR=3066993
          else
            STATUS="❌ Failed"
            COLOR=15158332
          fi

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "OpenShift CD Bot",
                 "embeds": [{
                   "title": "'"Deployment: $STATUS"'",
                   "description": "**Repository:** [${{ github.repository }}](${{ github.server_url }}/${{ github.repository }})\n**Branch:** `${{ github.ref_name }}`\n**URL:** ${{ env.ROUTE_URL }}\n**Health:** ${{ env.HEALTH_STATUS }}",
                   "color": '"$COLOR"'
                 }]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"

  notify-start:
    name: Notify Deployment Start
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Start Notification
        run: |
          curl -H "Content-Type: application/json" \
                -X POST \
                -d '{
                  "username": "OpenShift CD Bot",
                  "embeds": [
                    {
                      "title": "🔄 Deployment Started",
                      "description": "**Repository:** [${{ github.repository }}](${{ github.repository }})\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}\n**Triggered by:** CI Pipeline Completion\n\nDeployment to OpenShift production environment is starting...",
                      "color": 16776960,
                      "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                    }
                  ]
                }' \
                "${{ secrets.DISCORD_WEBHOOK_URL }}"

# OpenShift Cluster
# │
# ├── Namespace: your-project
# │   ├── Secret: mysql-root-secret
# │   │   ├── MYSQL_ROOT_PASSWORD: "actual-password-here"
# │   │   └── MYSQL_DATABASE: "spring_artifacts"
# │   │
# │   └── Secret: mysql-secret
# │       ├── SPRING_DATASOURCE_URL: "jdbc:mysql://mysql-service:3306/spring_artifacts..."
# │       ├── SPRING_DATASOURCE_USERNAME: "app-username"
# │       ├── SPRING_DATASOURCE_PASSWORD: "app-password"
# │       └── SERVER_PORT: "8081"