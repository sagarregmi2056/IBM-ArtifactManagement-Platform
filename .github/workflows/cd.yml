name: Spring Boot CD to OpenShift



# Watches your CI pipeline named "Spring Boot CI"

# Triggers automatically when CI completes successfully on main branch

# This creates the CI ‚Üí CD chain

on:
  workflow_run:
    workflows: ["Spring Boot CI"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy-to-openshift:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
    environment: production



    # Gets your OpenShift YAML files from repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
     
      - name: Install OpenShift CLI (oc)
        run: |
         echo "üì• Installing OpenShift CLI..."
         # Download and install oc CLI
         curl -L https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz -o oc.tar.gz
         tar -xzf oc.tar.gz
         sudo mv oc /usr/local/bin/
         sudo chmod +x /usr/local/bin/oc
         echo "‚úÖ OpenShift CLI installed"
         # Verify installation
         oc version --client

      # Authenticates with OpenShift cluster using secrets
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ secrets.OPENSHIFT_PROJECT }}
              # --- 1. Create Secrets for Both MySQL and Spring Boot ---
      - name: Create MySQL Secrets
        run: |
          if ! oc get secret mysql-root-secret >/dev/null 2>&1; then
            echo "üîê Creating MySQL root secret..."
            oc create secret generic mysql-root-secret \
              --from-literal=MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
              --from-literal=MYSQL_DATABASE=spring_artifacts
          else
            echo "‚úÖ MySQL root secret already exists"
          fi

          if ! oc get secret mysql-secret >/dev/null 2>&1; then
            echo "üîê Creating MySQL application secret..."
            oc create secret generic mysql-secret \
              --from-literal=SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/spring_artifacts?createDatabaseIfNotExist=true \
              --from-literal=SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }} \
              --from-literal=SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
              --from-literal=SERVER_PORT=8081
          else
            echo "‚úÖ MySQL application secret already exists"
          fi

      # --- 2. Deploy MySQL Database and Create Route for Spring Boot ---
        # Deploy MySQL database if it doesn't exist
        # Create route for Spring Boot if it doesn't exist
        # Set environment variables for Spring Boot
        # Deploy Spring Boot application if it doesn't exist
        # Wait for rollout to complete
        # Verify deployment
        # Send Discord notification
      - name: Bootstrap Environment
        run: |
          if ! oc get deployment/mysql >/dev/null 2>&1; then
            echo "üîß Deploying MySQL database..."
            oc apply -f openshift/mysql/mysql-pvc.yaml
            oc apply -f openshift/mysql/mysql-deployment.yaml
            oc apply -f openshift/mysql/mysql-service.yaml
            echo "‚è≥ Waiting for MySQL to be ready..."
            oc wait --for=condition=ready pod -l app=mysql --timeout=300s
            echo "‚úÖ MySQL is ready"
          else
            echo "‚úÖ MySQL already deployed"
          fi

          if ! oc get route spring-boot-route >/dev/null 2>&1; then
            echo "üîß Creating Spring Boot services..."
            oc apply -f openshift/spring-boot-service.yaml
            oc apply -f openshift/spring-boot-route.yaml
            echo "‚úÖ Spring Boot services created"
          else
            echo "‚úÖ Spring Boot services already exist"
          fi

      # --- 3. Deploy Spring Boot Application ---
      - name: Deploy Spring Boot Application
        run: |
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          IMAGE_NAME="saga99/spring-boot-service:${SHORT_SHA}"

          echo "üöÄ Deploying Spring Boot app with image: ${IMAGE_NAME}"
          
          oc set env dc/spring-boot-app \
            SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/spring_artifacts?createDatabaseIfNotExist=true \
            SPRING_DATASOURCE_USERNAME=${{ secrets.MYSQL_USERNAME }} \
            SPRING_DATASOURCE_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            SERVER_PORT=8081
          
          if oc get dc/spring-boot-app >/dev/null 2>&1; then
            echo "üîÑ Updating existing deployment..."
            oc set image dc/spring-boot-app spring-boot-app=${IMAGE_NAME} --record=true
            oc rollout latest dc/spring-boot-app
          else
            echo "üÜï Creating new deployment..."
            cat openshift/spring-boot-deployment.yaml | sed "s|saga99/spring-boot-service:latest|${IMAGE_NAME}|g" | oc apply -f -
          fi

      - name: Wait for Rollout
        run: |
          echo "‚è≥ Waiting for rollout to complete..."
          oc rollout status dc/spring-boot-app --timeout=600s
          echo "üîç Waiting for application to be fully ready..."
          oc wait --for=condition=ready pod -l app=spring-boot-app --timeout=300s

      - name: Verify Deployment
        run: |
          ROUTE_URL=$(oc get route spring-boot-route -o jsonpath='{.spec.host}')
          POD_NAME=$(oc get pods -l app=spring-boot-app -o jsonpath='{.items[0].metadata.name}')
          MYSQL_POD=$(oc get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}')
          
          echo "üåê Application URL: https://${ROUTE_URL}"
          echo "üì¶ Running Pod: ${POD_NAME}"
          echo "üóÑÔ∏è MySQL Pod: ${MYSQL_POD}"
          
          echo "ROUTE_URL=https://${ROUTE_URL}" >> $GITHUB_ENV
          echo "APP_POD=${POD_NAME}" >> $GITHUB_ENV
          echo "MYSQL_POD=${MYSQL_POD}" >> $GITHUB_ENV
          
          echo "üìã Application logs (last 10 lines):"
          oc logs ${POD_NAME} --tail=10
          
          echo "üîç Testing health endpoint..."
          if oc exec ${POD_NAME} -- curl -s http://localhost:8081/actuator/health > /dev/null; then
            echo "‚úÖ Health check passed"
            echo "HEALTH_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "‚ùå Health check failed"
            echo "HEALTH_STATUS=FAILED" >> $GITHUB_ENV
            exit 1
          fi
          
          echo "üîç Testing application response..."
          RESPONSE_CODE=$(oc exec ${POD_NAME} -- curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/actuator/health || echo "000")
          if [ "$RESPONSE_CODE" = "200" ]; then
            echo "‚úÖ Application is responding correctly"
            echo "RESPONSE_CODE=200" >> $GITHUB_ENV
          else
            echo "‚ùå Application not responding properly (HTTP $RESPONSE_CODE)"
            echo "RESPONSE_CODE=$RESPONSE_CODE" >> $GITHUB_ENV
            exit 1
          fi

      - name: Deployment Status
        run: |
          echo "üéâ DEPLOYMENT SUMMARY"
          echo "===================="
          oc get pods -l app=spring-boot-app
          echo ""
          oc get route spring-boot-route
          echo ""
          echo "‚úÖ CD Pipeline Completed Successfully!"

  notify:
    name: Send Discord Notification
    runs-on: ubuntu-latest
    needs: deploy-to-openshift
    if: always()
    steps:
      - name: Send Discord Notification
        run: |
          # Determine status and color
          if [ "${{ needs.deploy-to-openshift.result }}" == "success" ]; then
            STATUS="‚úÖ SUCCESS"
            COLOR=65280
            EMOJI="üéâ"
          else
            STATUS="‚ùå FAILED" 
            COLOR=16711680
            EMOJI="üí•"
          fi

          # Get deployment info
          ROUTE_URL="${{ env.ROUTE_URL }}"
          
          # Simple message
          MESSAGE="$EMOJI **Deployment $STATUS**
          
          **Repository:** ${{ github.repository }}
          **Application:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${GITHUB_SHA:0:7}

          **üåê URL:** $ROUTE_URL
          **üìä Health:** ${{ env.HEALTH_STATUS }}

          **View Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          # Send to Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{
                 \"username\": \"OpenShift CD Bot\",
                 \"embeds\": [{
                   \"title\": \"CD Deployment - $STATUS\",
                   \"description\": \"$MESSAGE\",
                   \"color\": $COLOR,
                   \"timestamp\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\"
                 }]
               }" \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"
          
          echo "‚úÖ Discord notification sent"

  notify-start:
    name: Notify Deployment Start
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Start Notification
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "OpenShift CD Bot",
                 "embeds": [
                   {
                     "title": "üîÑ Deployment Started",
                     "description": "**Repository:** [${{ github.repository }}](${{ github.repository }})\n**Branch:** ${{ github.ref_name }}\n**Commit:** ${{ github.sha }}\n**Triggered by:** CI Pipeline Completion\n\nDeployment to OpenShift production environment is starting...",
                     "color": 16776960,
                     "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                   }
                 ]
               }' \
               "${{ secrets.DISCORD_WEBHOOK_URL }}"










# OpenShift Cluster
# ‚îÇ
# ‚îú‚îÄ‚îÄ Namespace: your-project
# ‚îÇ   ‚îú‚îÄ‚îÄ Secret: mysql-root-secret
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MYSQL_ROOT_PASSWORD: "actual-password-here"
# ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MYSQL_DATABASE: "spring_artifacts"
# ‚îÇ   ‚îÇ
# ‚îÇ   ‚îî‚îÄ‚îÄ Secret: mysql-secret
# ‚îÇ       ‚îú‚îÄ‚îÄ SPRING_DATASOURCE_URL: "jdbc:mysql://mysql-service:3306/spring_artifacts..."
# ‚îÇ       ‚îú‚îÄ‚îÄ SPRING_DATASOURCE_USERNAME: "app-username"
# ‚îÇ       ‚îú‚îÄ‚îÄ SPRING_DATASOURCE_PASSWORD: "app-password"
# ‚îÇ       ‚îî‚îÄ‚îÄ SERVER_PORT: "8081"